pokedex.scraped
library(tidyr)
pokedex.table <- pokedex.scraped %>%
extract(Type, into = c("Type1", "Type2"),
"([A-Z][a-z]+)([A-Z][a-z]+)")
pokedex.table %>% head()
for(i in 1:nrow(pokedex.table)) {
if (is.na(pokedex.table$Type1[i])) {
pokedex.table$Type1[i] <- pokedex.scraped$Type[i]
}
}
pokedex.table$Type1 <- factor(pokedex.table$Type1)
pokedex.table$Type2 <- factor(pokedex.table$Type2)
pokedex.table %>% head()
url <- "https://pokemondb.net/pokedex/stats/height-weight"
height.weight.scraped <- url %>%
read_html() %>%
html_node("table.data-table") %>%
html_table() %>%
as.data.frame() %>%
# we can get rid of Type because we already have Type1 and Type2
within(rm(Type))
height.weight.scraped %>% head()
pokedex.table <- height.weight.scraped %>%
inner_join(pokedex.table, by = "Name") %>%
within(rm("#.y")) %>%
rename("#" = "#.x")
pokedex.table %>% head()
url <- "https://bulbapedia.bulbagarden.net/wiki/List_of_Pokemon_by_catch_rate"
capture.rate.scraped <- url %>%
read_html() %>%
html_node("table.sortable") %>%
html_table() %>%
as.data.frame() %>%
rename("Catch_rate" = "Catch rate")
capture.rate.scraped$Catch_rate <- as.numeric(capture.rate.scraped$Catch_rate)
# we'll keep only the columns we need
capture.rate.scraped <- capture.rate.scraped[c("Name", "Catch_rate")]
capture.rate.scraped %>% head()
pokedex.table <- capture.rate.scraped %>%
inner_join(pokedex.table, by = "Name")
pokedex.table
ranges = c(1,152,252,387,494,650,722)
for (i in 1:nrow(pokedex.table)) {
for (g in length(ranges):1) {
if (pokedex.table$`#`[i] >= ranges[g]) {
pokedex.table$Gen[i] <- g
break
}
}
}
pokedex.table$Gen <- factor(pokedex.table$Gen)
pokedex.table %>% head()
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
testData.subset
library(dplyr)
library(rvest)
url <- "https://pokemondb.net/pokedex/all"
pokedex.scraped <- url %>%
read_html() %>%
html_node("table#pokedex") %>%
html_table() %>%
as.data.frame() %>%
rename("Sp.Atk" = "Sp. Atk") %>%
rename("Sp.Def" = "Sp. Def")
pokedex.scraped %>% head()
pokedex.scraped <- pokedex.scraped %>%
filter(grepl("Mega", Name) == FALSE)
pokedex.scraped
library(tidyr)
pokedex.table <- pokedex.scraped %>%
extract(Type, into = c("Type1", "Type2"),
"([A-Z][a-z]+)([A-Z][a-z]+)")
pokedex.table %>% head()
for(i in 1:nrow(pokedex.table)) {
if (is.na(pokedex.table$Type1[i])) {
pokedex.table$Type1[i] <- pokedex.scraped$Type[i]
}
}
pokedex.table$Type1 <- factor(pokedex.table$Type1)
pokedex.table$Type2 <- factor(pokedex.table$Type2)
pokedex.table %>% head()
url <- "https://pokemondb.net/pokedex/stats/height-weight"
height.weight.scraped <- url %>%
read_html() %>%
html_node("table.data-table") %>%
html_table() %>%
as.data.frame() %>%
# we can get rid of Type because we already have Type1 and Type2
within(rm(Type))  %>%
rename("Height_m" = "Height (m)") %>%
rename("Weight_kgs"= "Weight (kgs)")
height.weight.scraped %>% head()
pokedex.table <- height.weight.scraped %>%
inner_join(pokedex.table, by = "Name") %>%
within(rm("#.y")) %>%
rename("#" = "#.x")
pokedex.table %>% head()
url <- "https://bulbapedia.bulbagarden.net/wiki/List_of_Pokemon_by_catch_rate"
capture.rate.scraped <- url %>%
read_html() %>%
html_node("table.sortable") %>%
html_table() %>%
as.data.frame() %>%
rename("Catch_rate" = "Catch rate")
capture.rate.scraped$Catch_rate <- as.numeric(capture.rate.scraped$Catch_rate)
# we'll keep only the columns we need
capture.rate.scraped <- capture.rate.scraped[c("Name", "Catch_rate")]
capture.rate.scraped %>% head()
pokedex.table <- capture.rate.scraped %>%
inner_join(pokedex.table, by = "Name")
pokedex.table
ranges = c(1,152,252,387,494,650,722)
for (i in 1:nrow(pokedex.table)) {
for (g in length(ranges):1) {
if (pokedex.table$`#`[i] >= ranges[g]) {
pokedex.table$Gen[i] <- g
break
}
}
}
pokedex.table$Gen <- factor(pokedex.table$Gen)
pokedex.table %>% head()
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
typeof(isLegendary)
typeof(df$isLegendary)
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
typeof(df$isLegendary)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
typeof(df$isLegendary)
typeof(df$isLegendary)
df$isLegendary <- factor(df$isLegendary)
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
df$isLegendary <- factor(df$isLegendary)
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
df$isLegendary <- as.numeric(df$isLegendary)
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
df$isLegendary <- as.numeric(df$isLegendary)
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
typeof(df$isLegendary)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
df$isLegendary <- FALSE
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
typeof(df$isLegendary)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
typeof(df$isLegendary)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- 0 # FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- 1 #TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
typeof(df$isLegendary)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
legendaries = c("Zapdos", "Articuno", "Moltres", "Mewtwo",
"Mew", "Raikou", "Entei", "Suicune",
"Lugia", "Celebi",
"Regirock", "Regice", "Registeel",
"Latias", "Latios", "Kyogre", "Groudon", "Rayquaza",
"Jirachi", "Uxie", "Mesprit", "Azelf", "Dialga",
"Palkia", "Heatran", "Regigigas", "Giratina",
"Cresselia", "Phione", "Manaphy", "Darkrai",
"Arceus", "Victini", "Reshiram", "Zekrom",
"Kyurem", "Genesect")
df <- pokedex.table
df$isLegendary <- 0 # FALSE
for (i in 1:length(legendaries)) {
df$isLegendary[df$Name == legendaries[i]] <- 1 #TRUE
}
library(randomForest)
trainingData <- df[df$Gen == 2 | df$Gen == 4 | df$Gen == 6, ]
trainingData
testData <- df[df$Gen == 1 | df$Gen == 3 | df$Gen == 5, ]
testData
set.seed(1234)
rf <- randomForest(isLegendary ~ Total + Catch_rate, importance = TRUE, mtry=2, data = trainingData, na.action=na.exclude)
#rf
test.labels <- testData[, "isLegendary"]
predictions <- predict(rf, testData[c("Total", "Catch_rate")])
table(predictions, test.labels)
testData$Prediction <- predictions
testData.subset <- testData %>%
select(Name, Total, Catch_rate, isLegendary, Prediction)
# filter for FP
testData.subset %>%
filter(Prediction == TRUE & isLegendary == FALSE)
df %>%
filter(!is.na(Type2)) %>%
select(Name, Type1, Type2)
setwd("~/UMD/CMSC320/projects/final")
library(dplyr)
library(rvest)
url <- "https://pokemondb.net/pokedex/all"
pokedex.scraped <- url %>%
read_html() %>%
html_node("table#pokedex") %>%
html_table() %>%
as.data.frame() %>%
rename("Sp.Atk" = "Sp. Atk") %>%
rename("Sp.Def" = "Sp. Def")
pokedex.scraped %>% head()
pokedex.scraped <- pokedex.scraped %>%
filter(grepl("Mega", Name) == FALSE)
pokedex.scraped %>% head()
library(tidyr)
pokedex.table <- pokedex.scraped %>%
extract(Type, into = c("Type1", "Type2"),
"([A-Z][a-z]+)([A-Z][a-z]+)")
pokedex.table %>% head()
for(i in 1:nrow(pokedex.table)) {
if (is.na(pokedex.table$Type1[i])) {
pokedex.table$Type1[i] <- pokedex.scraped$Type[i]
}
}
pokedex.table$Type1 <- factor(pokedex.table$Type1)
pokedex.table$Type2 <- factor(pokedex.table$Type2)
pokedex.table %>% head()
url <- "https://pokemondb.net/pokedex/stats/height-weight"
height.weight.scraped <- url %>%
read_html() %>%
html_node("table.data-table") %>%
html_table() %>%
as.data.frame() %>%
# we can get rid of Type because we already have Type1 and Type2
within(rm(Type))  %>%
rename("Height_m" = "Height (m)") %>%
rename("Weight_kgs"= "Weight (kgs)")
height.weight.scraped %>% head()
pokedex.table <- height.weight.scraped %>%
inner_join(pokedex.table, by = "Name") %>%
within(rm("#.y")) %>%
rename("#" = "#.x")
pokedex.table %>% head()
url <- "https://bulbapedia.bulbagarden.net/wiki/List_of_Pokemon_by_catch_rate"
capture.rate.scraped <- url %>%
read_html() %>%
html_node("table.sortable") %>%
html_table() %>%
as.data.frame() %>%
rename("Catch_rate" = "Catch rate")
capture.rate.scraped$Catch_rate <- as.numeric(capture.rate.scraped$Catch_rate)
# we'll keep only the columns we need
capture.rate.scraped <- capture.rate.scraped[c("Name", "Catch_rate")]
capture.rate.scraped %>% head()
pokedex.table <- capture.rate.scraped %>%
inner_join(pokedex.table, by = "Name")
pokedex.table %>% head()
ranges = c(1,152,252,387,494,650,722)
for (i in 1:nrow(pokedex.table)) {
for (g in length(ranges):1) {
if (pokedex.table$`#`[i] >= ranges[g]) {
pokedex.table$Gen[i] <- g
break
}
}
}
pokedex.table$Gen <- factor(pokedex.table$Gen)
pokedex.table %>% head()
rmarkdown::render('index.Rmd')
rmarkdown::render('index.Rmd')
